<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Bootstrap demo</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT"
      crossorigin="anonymous" />
  </head>
  <body>
    <%- include('nav.html') %>
    <ul class="list-group">
      <li class="list-group-item">에러 처리 책에서 찾아보기</li>
      <li class="list-group-item">요청.params.id 와 _id의 차이를 알아보기</li>
      <li class="list-group-item">
        <a
          href="https://cloud.mongodb.com/v2/63322b10c4119211e481eddf#metrics/replicaSet/63322b755d7abf3fa2be837a/explorer/todoapp/post/find/"
          >몽고디비</a
        >
      </li>
      <li class="list-group-item">
        font-awesome 아주 유용해보인다. 폰트 뒤 div에 스타일 주면 원형도 띄울 수
        있음
      </li>
      <li class="list-group-item">PowerShell 등에서 보안오류가 뜬다면</li>
      <li class="list-group-item">
        관리자권한으로 powershell 실행
        <details>
          <summary>click</summary>
          <ol>
            <li>executionpolicy 입력</li>
            <li>set-excutionpolicy unrestricted 입력</li>
            <li>y 입력</li>
          </ol>
        </details>
      </li>
      <li class="list-group-item">
        sendFile() 함수를 쓰면 파일을 보낼 수 있습니다
      </li>
      <li class="list-group-item">__dirname은 현재 파일의 경로를 뜻합니다.</li>
      <li class="list-group-item">
        bootstrap 사용하기
        <details>
          <summary>클릭</summary>
          <pre>
            Bootstrap을 설치해서 빠르게 HTML UI를 개발하자
            구글에 Bootstrap 검색하신 후 맨 처음에 뜨는 사이트에 방문하도록 합니다.
            그리고 Get started 메뉴 혹은 버튼을 누른 뒤
            starter template라는 부분의 예제 코드를 복붙하면 됩니다.
            여러분 index.html 에 있던 내용을 싸그리 삭제하고 붙여넣습니다.
            (못찾겠다면 https://getbootstrap.com/docs/4.4/getting-started/introduction/#starter-template 방문하십시오)
          </pre>
        </details>
      </li>
      <li class="list-group-item">
        ejs 파일을 get요청하려면 <br />
        <code>
          app.get('/xxx',function(요청,응답){ 응답.reder(xxx.ejs) }<br />
          =
          <br />
          app.get('/xxx',(요청,응답) => { 응답.reder(xxx.ejs) })
        </code>
      </li>
      <li class="list-group-item">
        form 태그에
        <code> &#60;form action="/add" method="POST"&#62;&#60;/form&#62; </code>
      </li>
      <li class="list-group-item">
        관습적으로 무언가를 서버에 추가할때는 post요청을 합니다.
      </li>
      <li class="list-group-item">
        <p>
          body parser 노드 라이브러리로 html input 안에 적힌 데이터들을
          해석해준다.
        </p>
      </li>
      <li class="list-group-item">
        input 에게 name이란 속성을 꼭 추가해줘야한다.
      </li>
      <li class="list-group-item">
        <a href="/mongodb">MongoDB 셋팅하기 (무료 호스팅도 받아보자)</a>
      </li>
      <li class="list-group-item">
        insertOne({제목:요청.body.title,날짜:요청.body.date})<br />
        디비에 데이터 하나를 insert 해주세요~
      </li>
      <li class="list-group-item">
        ejs 사용하기 &#60;%= 변수이름 %&#62; <br />
        &#60;% 변수이름 %&#62;<br />
        모든 ejs 파일은 views 폴더안에 넣기
      </li>
      <li class="list-group-item">find(), toarray() 함수 찾아보기</li>
      <li class="list-group-item">
        그리고 EJS 안에서 자바스크립트 문법을 쓰실 땐 <% %> 내부에
        담으셔야합니다.
      </li>
      <li class="list-group-item">
        DELETE 요청을 하는법
        <ol>
          <li>
            method-override 라는 라이브러리 사용하기 (form에서 delete 요청 바로
            가능)
          </li>
          <li>AJAX 사용하기</li>
        </ol>
      </li>
      <li class="list-group-item">
        <a
          href="https://getbootstrap.com/docs/5.2/getting-started/introduction/">
          부트스트랩 예시 링크</a
        >
      </li>
      <li class="list-group-item">
        <pre>
          <code>
            <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script><!--1. slim이라는 글자를 지우고 2. 뒤에 있는 이상한 긴 글자들을 제거합니다.이렇게 써주셔야 정상적으로 AJAX 기능이 들어있는 jQuery 라이브러리를 설치할 수 있습니다.-->
            <script>
              $('.delete').click(function(e){   
                      var 글번호 = e.target.dataset.id //내가 누른 요소의 data-id
                      var 지금누른버튼 = $(this); // $(this) 라는 단어는 현재 클릭이벤트가 동작하는 곳입니다.  $(e.target)으로 대체 가능합니다. (지금 누른것) 하지만 e.target이나 this 같은 키워드 뒤에 jQuery 함수를 붙이고 싶다면 $() 안에 싸매셔야합니다. 
                      $.ajax({
                            method : 'DELETE',
                            url :'/delete', //'요청할경로',
                            data : {_id : 글번호 }//'요청과 함께 보낼 데이터' ex) '게시물번호'
                      }).done((결과) => {
                            //done() 안에 function(){} 말고 ()=>{} 이런 함수로 바꿔봤습니다. 그래야 this값의 변형없이 잘됩니다.
                            console.log('성공했어염')
                            지금누른버튼.parent('li').fadeOut();
                            //1. 삭제버튼을 누른 요소를 제거해주세요.(안보이게해주세요)
                            //지금누른버튼의 부모님 중 'li'을 찾아주세요
                            //2. location.reload 페이지를 강제로 새로고침해주세요.
                      }).fail((xhr, textStatus, errorThrown) => {
                            console.log(xhr, textStatus, errorThrown);
                            // xhr = , testStatus = 400 같은 코드 출력, errorThrown = 에러메시지 보여줌
                      })
              });
            </script>
          </code>
        </pre>
        고객 요청에 응답하는 방법은 여러가지가 있습니다
      </li>
      <li class="list-group-item">
        <p>
          app.get('/어쩌구', function(요청, 응답){ 응답.send('some html')
          응답.status(404).send('Sorry, we cannot find that!')
          응답.sendFile('/uploads/logo.png') 응답.render('list.ejs', { ejs에
          보낼 데이터 }) 응답.json(제이슨데이터) }); send는 간단한 문자나 HTML을
          보낼 수 있습니다. status는 응답코드를 보낼 수 있습니다. sendFile은
          static 파일들을 보낼 수 있습니다. render는 ejs등의 템플릿이 적용된
          페이지들을 렌더링해줄 수 있습니다. json은 제이슨 데이터를 담아보낼 수
          있습니다.
        </p>
      </li>
      <li class="list-group-item">
        <p>
          app.get("/detail/:id", function (요청, 응답) {
          db.collection("post").findOne({ _id: 요청.params.id }, function (에러,
          결과) { console.log(결과); 응답.render(`detail.ejs`, { data: 결과 });
          }); });
        </p>
      </li>
    </ul>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8"
      crossorigin="anonymous"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
      integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3"
      crossorigin="anonymous"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
      integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz"
      crossorigin="anonymous"></script>
  </body>
</html>
